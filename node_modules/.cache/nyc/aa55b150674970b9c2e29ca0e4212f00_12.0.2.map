{"version":3,"sources":["app.js"],"names":["express","require","bodyParser","app","use","json","u1","User","u2","u3","u4","rides","Ride","userID","get","req","res","send","success","forEach","element","rideID","params","rideId","status","post","ride","body","hasOrigin","Object","prototype","hasOwnProperty","call","hasDestination","hasTime","hasAllowStops","hasAvaliableSpace","hasDescription","push","origin","destination","time","allowStops","avaliableSpace","description","length","request","hasRequesterID","addRequest","PORT","process","env","server","listen","console","log"],"mappings":"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","file":"app.js","sourceRoot":"C:/Users/opeol/Desktop/Ride-My-Way/server","sourcesContent":["import Ride from './classes/ride';\r\nimport User from './classes/user';\r\n\r\nconst express = require('express');\r\nconst bodyParser = require('body-parser');\r\n\r\nconst app = express();\r\napp.use(bodyParser.json());\r\n\r\n// Just some mock users for testing purposes\r\nconst u1 = new User('Jide', 'Dayo', 'Male', '08/03/1990', '0801472689', 'JideDayo@ridemyway.com');\r\nconst u2 = new User('James', 'Ikechukwu', 'Male', '08/07/1993', '08073901746', 'JamesIK@ridemyway.com');\r\nconst u3 = new User('Francis', 'Odebala', 'Male', '18/11/1985', '08927839810', 'FrancisO@ridemyway.com');\r\nconst u4 = new User('Okon', 'Johnson', 'Male', '12/05/1990', '09094782319', 'Okon@ridemyway.com');\r\n\r\n// Array to hold the rides\r\nconst rides = [\r\n  // Just some mock rides for testing purposes\r\n  new Ride(u1.userID, 'Ikeja', 'Musin', '9:30AM', true, 3, 'Ikeja to Mushin via Oshodi'),\r\n  new Ride(u2.userID, 'Lagos', 'Enugu', '12:00PM', false, 2, 'Non-stop to enugu'),\r\n  new Ride(u3.userID, 'Ikorodu', 'Idumota', '1:45pm', false, 3),\r\n  new Ride(u4.userID, 'Magodo', 'Iyana-Ipaja', '3:00PM', true, 3, 'Going via Ogba and Agege'),\r\n];\r\n\r\napp.get('/', (req, res) => {\r\n  res.send('server is running, kindly use api endpoints.');\r\n});\r\n\r\napp.get('/api/v1/rides', (req, res) => {\r\n  res.json(rides);\r\n});\r\n\r\napp.get('/api/v1/rides/:rideId', (req, res) => {\r\n  let success = false;\r\n  rides.forEach((element) => {\r\n    if (element.rideID === req.params.rideId) {\r\n      success = true;\r\n      res.json(element);\r\n    }\r\n  });\r\n\r\n  if (!success) {\r\n    res.status(404).send('Information not found. Perhaps try to get the avaliable rides first and select an ID.');\r\n  }\r\n});\r\n\r\napp.post('/api/v1/rides', (req, res) => {\r\n  const ride = req.body;\r\n  const hasOrigin = Object.prototype.hasOwnProperty.call(ride, 'origin');\r\n  const hasDestination = Object.prototype.hasOwnProperty.call(ride, 'destination');\r\n  const hasTime = Object.prototype.hasOwnProperty.call(ride, 'time');\r\n  const hasAllowStops = Object.prototype.hasOwnProperty.call(ride, 'allowStops');\r\n  const hasAvaliableSpace = Object.prototype.hasOwnProperty.call(ride, 'avaliableSpace');\r\n  const hasDescription = Object.prototype.hasOwnProperty.call(ride, 'description');\r\n\r\n  if (hasOrigin && hasDestination && hasTime && hasAllowStops &&\r\n    hasAvaliableSpace && hasDescription) {\r\n    rides.push(new Ride(u1.userID, ride.origin, ride.destination, ride.time, ride.allowStops, ride.avaliableSpace, ride.description));\r\n    res.json(rides[rides.length - 1]);\r\n  } else {\r\n    res.status(400).send('The information you provided doesn\\'t conform.');\r\n  }\r\n});\r\n\r\napp.post('/api/v1/rides/:rideId/requests', (req, res) => {\r\n  const request = req.body;\r\n  const hasRequesterID = Object.prototype.hasOwnProperty.call(request, 'requesterID');\r\n  const hasDestination = Object.prototype.hasOwnProperty.call(request, 'destination');\r\n\r\n  if (hasRequesterID && hasDestination) {\r\n    rides.forEach((element) => {\r\n      if (element.rideID === req.params.rideId) {\r\n        element.addRequest(request);\r\n      }\r\n    });\r\n    res.json(rides);\r\n  } else {\r\n    res.status(400).send('Invalid data.');\r\n  }\r\n});\r\n\r\nconst PORT = process.env.PORT || 3000;\r\nconst server = app.listen(PORT, () => {\r\n  console.log(`App is running on port ${PORT}`);\r\n});\r\n\r\nexport default server;\r\n"]}