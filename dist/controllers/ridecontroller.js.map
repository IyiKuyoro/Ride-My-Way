{"version":3,"sources":["../../server/controllers/ridecontroller.js"],"names":["dotenv","config","controller","getRides","req","res","jwt","verify","headers","process","env","KEY","err","status","json","message","sql","client","query","error","result","data","rides","rows","e","getSpecificRide","params","rideId","rowCount","ride","postRideRequest","sqlInsert","values","body","requesterId","firstName","lastName","mobileNumber","sqlUpdate","id","inError","getRequests","requests","putResponse","newStatus","requestId"],"mappings":"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","file":"ridecontroller.js","sourcesContent":["import dotenv from 'dotenv';\r\nimport jwt from 'jsonwebtoken';\r\nimport client from '../model/db';\r\n\r\ndotenv.config();\r\n\r\nconst controller = {\r\n  getRides: (req, res) => {\r\n    try {\r\n      jwt.verify(req.headers.jwt, process.env.KEY, null, (err) => {\r\n        if (err) {\r\n          res.status(401).json({\r\n            status: 'fail',\r\n            message: 'This token is either wrong or has expired'\r\n          });\r\n        } else {\r\n          const sql = 'SELECT * FROM public.\"Rides\";';\r\n          client.query(sql, (error, result) => {\r\n            if (error) {\r\n              res.status(500);\r\n              res.json({\r\n                status: 'fail',\r\n                message: 'Oops, seems like something went wrong here'\r\n              });\r\n            } else {\r\n              res.status(200).json({\r\n                data: {\r\n                  rides: result.rows\r\n                }\r\n              });\r\n            }\r\n          });\r\n        }\r\n      });\r\n    } catch (e) {\r\n      res.status(500).json({\r\n        status: 'fail',\r\n        message: 'Oops, seems like something went wrong here'\r\n      });\r\n    }\r\n  },\r\n  getSpecificRide: (req, res) => {\r\n    try {\r\n      jwt.verify(req.headers.jwt, process.env.KEY, null, (err) => {\r\n        if (err) {\r\n          res.status(401).json({\r\n            status: 'fail',\r\n            message: 'This token is either wrong or has expired'\r\n          });\r\n        } else {\r\n          const sql = `SELECT * FROM public.\"Rides\" Where \"id\" = '${req.params.rideId}';`;\r\n          client.query(sql, (error, result) => {\r\n            if (error || result.rowCount === 0) {\r\n              res.status(404).json({\r\n                status: 'fail',\r\n                message: 'Ride not found'\r\n              });\r\n            } else {\r\n              res.status(200).json({\r\n                data: {\r\n                  ride: result.rows[0]\r\n                }\r\n              });\r\n            }\r\n          });\r\n        }\r\n      });\r\n    } catch (e) {\r\n      res.status(500).json({\r\n        status: 'fail',\r\n        message: 'Oops, seems like something went wrong here'\r\n      });\r\n    }\r\n  },\r\n  postRideRequest: (req, res) => {\r\n    try {\r\n      jwt.verify(req.headers.jwt, process.env.KEY, null, (err) => {\r\n        if (err) {\r\n          res.status(401).json({\r\n            status: 'fail',\r\n            message: 'This token is either wrong or has expired'\r\n          });\r\n        } else {\r\n          const sqlInsert = 'INSERT INTO public.\"Requests\" (\"rideId\", \"requesterId\", \"status\", \"requesterName\", \"mobileNumber\") VALUES ($1, $2, $3, $4, $5) RETURNING *;';\r\n          const values = [req.params.rideId, req.body.requesterId, 'pending', `${req.body.firstName} ${req.body.lastName}`, req.body.mobileNumber];\r\n          client.query(sqlInsert, values, (error, result) => {\r\n            if (error) {\r\n              res.status(400).json({\r\n                status: 'fail',\r\n                message: 'Some information provided is not of the right type'\r\n              });\r\n            } else {\r\n              const sqlUpdate = `UPDATE public.\"Rides\" SET \"requests\" = array_cat(\"requests\", '{${result.rows[0].id}}') Where \"id\" = '${req.params.rideId}';`;\r\n              client.query(sqlUpdate, (inError) => {\r\n                if (inError) {\r\n                  res.status(400).json({\r\n                    status: 'fail',\r\n                    message: 'Some information provided is not of the right type'\r\n                  });\r\n                } else {\r\n                  res.status(200).json({\r\n                    status: 'success',\r\n                    message: 'Request Sent'\r\n                  });\r\n                }\r\n              });\r\n            }\r\n          });\r\n        }\r\n      });\r\n    } catch (e) {\r\n      res.status(500).json({\r\n        status: 'fail',\r\n        message: 'Oops, seems like something went wrong here'\r\n      });\r\n    }\r\n  },\r\n  getRequests: (req, res) => {\r\n    try {\r\n      jwt.verify(req.headers.jwt, process.env.KEY, null, (err) => {\r\n        if (err) {\r\n          res.status(401).json({\r\n            status: 'fail',\r\n            message: 'This token is either wrong or has expired'\r\n          });\r\n        } else {\r\n          const sql = `SELECT * FROM public.\"Requests\" Where \"rideId\" = '${req.params.rideId}';`;\r\n          client.query(sql, (error, result) => {\r\n            if (error || result.rowCount === 0) {\r\n              res.status(400).json({\r\n                status: 'fail',\r\n                message: 'Cannot get requests'\r\n              });\r\n            } else {\r\n              res.status(200).json({\r\n                status: 'success',\r\n                data: {\r\n                  requests: result.rows\r\n                }\r\n              });\r\n            }\r\n          });\r\n        }\r\n      });\r\n    } catch (e) {\r\n      res.status(500).json({\r\n        status: 'fail',\r\n        message: 'Oops, seems like something went wrong here'\r\n      });\r\n    }\r\n  },\r\n  putResponse: (req, res) => {\r\n    try {\r\n      jwt.verify(req.headers.jwt, process.env.KEY, null, (err) => {\r\n        if (err) {\r\n          res.status(401).json({\r\n            status: 'fail',\r\n            message: 'This token is either wrong or has expired'\r\n          });\r\n        } else {\r\n          const sql = `UPDATE public.\"Requests\" SET \"status\" = '${req.body.newStatus}' Where \"id\" = '${req.params.requestId}';`;\r\n          client.query(sql, (error, result) => {\r\n            if (error || result.rowCount === 0) {\r\n              res.status(400).json({\r\n                status: 'fail',\r\n                message: 'Cannot put response'\r\n              });\r\n            } else {\r\n              res.status(200).json({\r\n                status: 'success',\r\n                message: 'Response recorded'\r\n              });\r\n            }\r\n          });\r\n        }\r\n      });\r\n    } catch (e) {\r\n      res.status(500).json({\r\n        status: 'fail',\r\n        message: 'Oops, seems like something went wrong here'\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nexport default controller;\r\n"]}