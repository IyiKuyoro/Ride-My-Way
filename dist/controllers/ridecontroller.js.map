{"version":3,"sources":["../../server/controllers/ridecontroller.js"],"names":["dotenv","config","controller","getRides","req","res","jwt","verify","headers","process","env","KEY","err","status","json","message","sql","client","query","error","result","rowCount","rows","e","getSpecificRide","params","rideId","postRideRequest","sqlInsert","values","body","requesterID","FirstName","LastName","MobileNumber","sqlUpdate","ID","inError","getRequests"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEAA,iBAAOC,MAAP;;AAEA,IAAMC,aAAa;AACjBC,YAAU,kBAACC,GAAD,EAAMC,GAAN,EAAc;AACtB,QAAI;AACFC,6BAAIC,MAAJ,CAAWH,IAAII,OAAJ,CAAYF,GAAvB,EAA4BG,QAAQC,GAAR,CAAYC,GAAxC,EAA6C,IAA7C,EAAmD,UAACC,GAAD,EAAS;AAC1D,YAAIA,GAAJ,EAAS;AACPP,cAAIQ,MAAJ,CAAW,GAAX;AACAR,cAAIS,IAAJ,CAAS;AACPC,qBAAS;AADF,WAAT;AAGD,SALD,MAKO;AACL,cAAMC,MAAM,+BAAZ;AACAC,uBAAOC,KAAP,CAAaF,GAAb,EAAkB,UAACG,KAAD,EAAQC,MAAR,EAAmB;AACnC,gBAAID,SAASC,OAAOC,QAAP,KAAoB,CAAjC,EAAoC;AAClChB,kBAAIQ,MAAJ,CAAW,GAAX;AACAR,kBAAIS,IAAJ,CAAS;AACPC,yBAAS;AADF,eAAT;AAGD,aALD,MAKO;AACLV,kBAAIQ,MAAJ,CAAW,GAAX;AACAR,kBAAIS,IAAJ,CAASM,OAAOE,IAAhB;AACD;AACF,WAVD;AAWD;AACF,OApBD;AAqBD,KAtBD,CAsBE,OAAOC,CAAP,EAAU;AACVlB,UAAIQ,MAAJ,CAAW,GAAX;AACAR,UAAIS,IAAJ,CAAS;AACPC,iBAAS;AADF,OAAT;AAGD;AACF,GA9BgB;AA+BjBS,mBAAiB,yBAACpB,GAAD,EAAMC,GAAN,EAAc;AAC7B,QAAI;AACFC,6BAAIC,MAAJ,CAAWH,IAAII,OAAJ,CAAYF,GAAvB,EAA4BG,QAAQC,GAAR,CAAYC,GAAxC,EAA6C,IAA7C,EAAmD,UAACC,GAAD,EAAS;AAC1D,YAAIA,GAAJ,EAAS;AACPP,cAAIQ,MAAJ,CAAW,GAAX;AACAR,cAAIS,IAAJ,CAAS;AACPC,qBAAS;AADF,WAAT;AAGD,SALD,MAKO;AACL,cAAMC,uDAAoDZ,IAAIqB,MAAJ,CAAWC,MAA/D,QAAN;AACAT,uBAAOC,KAAP,CAAaF,GAAb,EAAkB,UAACG,KAAD,EAAQC,MAAR,EAAmB;AACnC,gBAAID,SAASC,OAAOC,QAAP,KAAoB,CAAjC,EAAoC;AAClChB,kBAAIQ,MAAJ,CAAW,GAAX;AACAR,kBAAIS,IAAJ,CAAS;AACPC,yBAAS;AADF,eAAT;AAGD,aALD,MAKO;AACLV,kBAAIQ,MAAJ,CAAW,GAAX;AACAR,kBAAIS,IAAJ,CAASM,OAAOE,IAAP,CAAY,CAAZ,CAAT;AACD;AACF,WAVD;AAWD;AACF,OApBD;AAqBD,KAtBD,CAsBE,OAAOC,CAAP,EAAU;AACVlB,UAAIQ,MAAJ,CAAW,GAAX;AACAR,UAAIS,IAAJ,CAAS;AACPC,iBAAS;AADF,OAAT;AAGD;AACF,GA5DgB;AA6DjBY,mBAAiB,yBAACvB,GAAD,EAAMC,GAAN,EAAc;AAC7B,QAAI;AACFC,6BAAIC,MAAJ,CAAWH,IAAII,OAAJ,CAAYF,GAAvB,EAA4BG,QAAQC,GAAR,CAAYC,GAAxC,EAA6C,IAA7C,EAAmD,UAACC,GAAD,EAAS;AAC1D,YAAIA,GAAJ,EAAS;AACPP,cAAIQ,MAAJ,CAAW,GAAX;AACAR,cAAIS,IAAJ,CAAS;AACPC,qBAAS;AADF,WAAT;AAGD,SALD,MAKO;AACL,cAAMa,YAAY,6IAAlB;AACA,cAAMC,SAAS,CAACzB,IAAIqB,MAAJ,CAAWC,MAAZ,EAAoBtB,IAAI0B,IAAJ,CAASC,WAA7B,EAA0C,SAA1C,EAAwD3B,IAAI0B,IAAJ,CAASE,SAAjE,SAA8E5B,IAAI0B,IAAJ,CAASG,QAAvF,EAAmG7B,IAAI0B,IAAJ,CAASI,YAA5G,CAAf;AACAjB,uBAAOC,KAAP,CAAaU,SAAb,EAAwBC,MAAxB,EAAgC,UAACV,KAAD,EAAQC,MAAR,EAAmB;AACjD,gBAAID,KAAJ,EAAW;AACTd,kBAAIQ,MAAJ,CAAW,GAAX;AACAR,kBAAIS,IAAJ,CAAS;AACPC,yBAAS;AADF,eAAT;AAGD,aALD,MAKO;AACL,kBAAMoB,iFAA8Ef,OAAOE,IAAP,CAAY,CAAZ,EAAec,EAA7F,4BAAoHhC,IAAIqB,MAAJ,CAAWC,MAA/H,QAAN;AACAT,2BAAOC,KAAP,CAAaiB,SAAb,EAAwB,UAACE,OAAD,EAAa;AACnC,oBAAIA,OAAJ,EAAa;AACXhC,sBAAIQ,MAAJ,CAAW,GAAX;AACAR,sBAAIS,IAAJ,CAAS;AACPC,6BAAS;AADF,mBAAT;AAGD,iBALD,MAKO;AACLV,sBAAIQ,MAAJ,CAAW,GAAX;AACAR,sBAAIS,IAAJ,CAAS;AACPC,6BAAS;AADF,mBAAT;AAGD;AACF,eAZD;AAaD;AACF,WAtBD;AAuBD;AACF,OAjCD;AAkCD,KAnCD,CAmCE,OAAOQ,CAAP,EAAU;AACVlB,UAAIQ,MAAJ,CAAW,GAAX;AACAR,UAAIS,IAAJ,CAAS;AACPC,iBAAS;AADF,OAAT;AAGD;AACF,GAvGgB;AAwGjBuB,eAAa,qBAAClC,GAAD,EAAMC,GAAN,EAAc;AACzB,QAAI;AACFC,6BAAIC,MAAJ,CAAWH,IAAII,OAAJ,CAAYF,GAAvB,EAA4BG,QAAQC,GAAR,CAAYC,GAAxC,EAA6C,IAA7C,EAAmD,UAACC,GAAD,EAAS;AAC1D,YAAIA,GAAJ,EAAS;AACPP,cAAIQ,MAAJ,CAAW,GAAX;AACAR,cAAIS,IAAJ,CAAS;AACPC,qBAAS;AADF,WAAT;AAGD,SALD,MAKO;AACL,cAAMC,8DAA2DZ,IAAIqB,MAAJ,CAAWC,MAAtE,QAAN;AACAT,uBAAOC,KAAP,CAAaF,GAAb,EAAkB,UAACG,KAAD,EAAQC,MAAR,EAAmB;AACnC,gBAAID,SAASC,OAAOC,QAAP,KAAoB,CAAjC,EAAoC;AAClChB,kBAAIQ,MAAJ,CAAW,GAAX;AACAR,kBAAIS,IAAJ,CAAS;AACPC,yBAAS;AADF,eAAT;AAGD,aALD,MAKO;AACLV,kBAAIQ,MAAJ,CAAW,GAAX;AACAR,kBAAIS,IAAJ,CAASM,OAAOE,IAAhB;AACD;AACF,WAVD;AAWD;AACF,OApBD;AAqBD,KAtBD,CAsBE,OAAOC,CAAP,EAAU;AACVlB,UAAIQ,MAAJ,CAAW,GAAX;AACAR,UAAIS,IAAJ,CAAS;AACPC,iBAAS;AADF,OAAT;AAGD;AACF;AArIgB,CAAnB;;kBAwIeb,U","file":"ridecontroller.js","sourcesContent":["import dotenv from 'dotenv';\r\nimport jwt from 'jsonwebtoken';\r\nimport client from '../model/db';\r\n\r\ndotenv.config();\r\n\r\nconst controller = {\r\n  getRides: (req, res) => {\r\n    try {\r\n      jwt.verify(req.headers.jwt, process.env.KEY, null, (err) => {\r\n        if (err) {\r\n          res.status(403);\r\n          res.json({\r\n            message: 'Forbiden'\r\n          });\r\n        } else {\r\n          const sql = 'SELECT * FROM public.\"Rides\";';\r\n          client.query(sql, (error, result) => {\r\n            if (error || result.rowCount === 0) {\r\n              res.status(401);\r\n              res.json({\r\n                message: 'Unauthorized'\r\n              });\r\n            } else {\r\n              res.status(200);\r\n              res.json(result.rows);\r\n            }\r\n          });\r\n        }\r\n      });\r\n    } catch (e) {\r\n      res.status(403);\r\n      res.json({\r\n        message: 'Forbiden'\r\n      });\r\n    }\r\n  },\r\n  getSpecificRide: (req, res) => {\r\n    try {\r\n      jwt.verify(req.headers.jwt, process.env.KEY, null, (err) => {\r\n        if (err) {\r\n          res.status(403);\r\n          res.json({\r\n            message: 'Forbiden'\r\n          });\r\n        } else {\r\n          const sql = `SELECT * FROM public.\"Rides\" Where \"ID\" = '${req.params.rideId}';`;\r\n          client.query(sql, (error, result) => {\r\n            if (error || result.rowCount === 0) {\r\n              res.status(401);\r\n              res.json({\r\n                message: 'Unauthorized'\r\n              });\r\n            } else {\r\n              res.status(200);\r\n              res.json(result.rows[0]);\r\n            }\r\n          });\r\n        }\r\n      });\r\n    } catch (e) {\r\n      res.status(403);\r\n      res.json({\r\n        message: 'Forbiden'\r\n      });\r\n    }\r\n  },\r\n  postRideRequest: (req, res) => {\r\n    try {\r\n      jwt.verify(req.headers.jwt, process.env.KEY, null, (err) => {\r\n        if (err) {\r\n          res.status(403);\r\n          res.json({\r\n            message: 'Forbiden'\r\n          });\r\n        } else {\r\n          const sqlInsert = 'INSERT INTO public.\"Requests\" (\"RideID\", \"RequesterID\", \"Status\", \"RequesterName\", \"MobileNumber\") VALUES ($1, $2, $3, $4, $5) RETURNING *;';\r\n          const values = [req.params.rideId, req.body.requesterID, 'pending', `${req.body.FirstName} ${req.body.LastName}`, req.body.MobileNumber];\r\n          client.query(sqlInsert, values, (error, result) => {\r\n            if (error) {\r\n              res.status(403);\r\n              res.json({\r\n                message: 'Unauthorized'\r\n              });\r\n            } else {\r\n              const sqlUpdate = `UPDATE public.\"Rides\" SET \"Requests\" = array_cat(\"Requests\", '{${result.rows[0].ID}}') Where \"ID\" = '${req.params.rideId}';`;\r\n              client.query(sqlUpdate, (inError) => {\r\n                if (inError) {\r\n                  res.status(403);\r\n                  res.json({\r\n                    message: 'Unauthorized'\r\n                  });\r\n                } else {\r\n                  res.status(200);\r\n                  res.json({\r\n                    message: 'Request Sent'\r\n                  });\r\n                }\r\n              });\r\n            }\r\n          });\r\n        }\r\n      });\r\n    } catch (e) {\r\n      res.status(403);\r\n      res.json({\r\n        message: 'Forbiden'\r\n      });\r\n    }\r\n  },\r\n  getRequests: (req, res) => {\r\n    try {\r\n      jwt.verify(req.headers.jwt, process.env.KEY, null, (err) => {\r\n        if (err) {\r\n          res.status(403);\r\n          res.json({\r\n            message: 'Forbiden'\r\n          });\r\n        } else {\r\n          const sql = `SELECT * FROM public.\"Requests\" Where \"RideID\" = '${req.params.rideId}';`;\r\n          client.query(sql, (error, result) => {\r\n            if (error || result.rowCount === 0) {\r\n              res.status(400);\r\n              res.json({\r\n                message: 'Cannot get requests'\r\n              });\r\n            } else {\r\n              res.status(200);\r\n              res.json(result.rows);\r\n            }\r\n          });\r\n        }\r\n      });\r\n    } catch (e) {\r\n      res.status(500);\r\n      res.json({\r\n        message: 'Application error'\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nexport default controller;\r\n"]}