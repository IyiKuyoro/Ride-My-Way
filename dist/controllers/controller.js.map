{"version":3,"sources":["../../server/controllers/controller.js"],"names":["controller","get","req","res","send","getSpecificRide","success","rides","forEach","element","rideID","params","rideId","json","status","message","postRequest","request","body","hasRequesterID","Object","prototype","hasOwnProperty","call","hasDestination","addRequest","postRide","ride","hasOrigin","hasTime","hasAllowStops","hasAvaliableSpace","hasDescription","push","Ride","users","userID","origin","destination","time","allowStops","avaliableSpace","description","length"],"mappings":"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","file":"controller.js","sourcesContent":["import rides from '../model/ridesmodel';\r\nimport users from '../model/usersmodel';\r\nimport Ride from '../model/classes/ride';\r\n\r\nconst controller = {\r\n  get: (req, res) => {\r\n    res.send('Server is running, kindly use the endpoints. /api/v1/rides, /api/v1/rides/:rideId, /api/v1/rides, /api/v1/rides/:rideId/requests');\r\n  },\r\n\r\n  getSpecificRide: (req, res) => {\r\n    let success = false;\r\n    rides.forEach((element) => {\r\n      if (element.rideID === req.params.rideId) {\r\n        success = true;\r\n        res.json(element);\r\n      }\r\n    });\r\n\r\n    if (!success) {\r\n      res.status(404);\r\n      res.json({\r\n        status: 'fail',\r\n        message: 'Information not found. Perhaps try to get the avaliable rides first and select an ID.',\r\n      });\r\n    }\r\n  },\r\n\r\n  postRequest: (req, res) => {\r\n    const request = req.body;\r\n    const hasRequesterID = Object.prototype.hasOwnProperty.call(request, 'requesterID');\r\n    const hasDestination = Object.prototype.hasOwnProperty.call(request, 'destination');\r\n\r\n    if (hasRequesterID && hasDestination) {\r\n      rides.forEach((element) => {\r\n        if (element.rideID === req.params.rideId) {\r\n          element.addRequest(request);\r\n        }\r\n      });\r\n      res.json(rides);\r\n    } else {\r\n      res.status(400);\r\n      res.json({\r\n        status: 'fail',\r\n        message: 'Invalid data.',\r\n      });\r\n    }\r\n  },\r\n\r\n  postRide: (req, res) => {\r\n    const ride = req.body;\r\n    const hasOrigin = Object.prototype.hasOwnProperty.call(ride, 'origin');\r\n    const hasDestination = Object.prototype.hasOwnProperty.call(ride, 'destination');\r\n    const hasTime = Object.prototype.hasOwnProperty.call(ride, 'time');\r\n    const hasAllowStops = Object.prototype.hasOwnProperty.call(ride, 'allowStops');\r\n    const hasAvaliableSpace = Object.prototype.hasOwnProperty.call(ride, 'avaliableSpace');\r\n    const hasDescription = Object.prototype.hasOwnProperty.call(ride, 'description');\r\n\r\n    if (hasOrigin && hasDestination && hasTime && hasAllowStops &&\r\n      hasAvaliableSpace && hasDescription) {\r\n      rides.push(new Ride(users[0].userID, ride.origin, ride.destination, ride.time, ride.allowStops, ride.avaliableSpace, ride.description));\r\n      res.json(rides[rides.length - 1]);\r\n    } else {\r\n      res.status(400);\r\n      res.json({\r\n        status: 'fail',\r\n        message: 'The information you provided doesn\\'t conform.',\r\n      });\r\n    }\r\n  },\r\n};\r\n\r\nexport default controller;\r\n"]}