{"version":3,"sources":["../../server/controllers/controller.js"],"names":["controller","get","req","res","send","postRide","ride","body","hasOrigin","Object","prototype","hasOwnProperty","call","hasDestination","hasTime","hasAllowStops","hasAvaliableSpace","hasDescription","rides","push","Ride","users","userID","origin","destination","time","allowStops","avaliableSpace","description","json","length","status","message"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,aAAa;AACjBC,OAAK,aAACC,GAAD,EAAMC,GAAN,EAAc;AACjBA,QAAIC,IAAJ,CAAS,kIAAT;AACD,GAHgB;;AAKjBC,YAAU,kBAACH,GAAD,EAAMC,GAAN,EAAc;AACtB,QAAMG,OAAOJ,IAAIK,IAAjB;AACA,QAAMC,YAAYC,OAAOC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCN,IAArC,EAA2C,QAA3C,CAAlB;AACA,QAAMO,iBAAiBJ,OAAOC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCN,IAArC,EAA2C,aAA3C,CAAvB;AACA,QAAMQ,UAAUL,OAAOC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCN,IAArC,EAA2C,MAA3C,CAAhB;AACA,QAAMS,gBAAgBN,OAAOC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCN,IAArC,EAA2C,YAA3C,CAAtB;AACA,QAAMU,oBAAoBP,OAAOC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCN,IAArC,EAA2C,gBAA3C,CAA1B;AACA,QAAMW,iBAAiBR,OAAOC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCN,IAArC,EAA2C,aAA3C,CAAvB;;AAEA,QAAIE,aAAaK,cAAb,IAA+BC,OAA/B,IAA0CC,aAA1C,IACFC,iBADE,IACmBC,cADvB,EACuC;AACrCC,2BAAMC,IAAN,CAAW,IAAIC,cAAJ,CAASC,qBAAM,CAAN,EAASC,MAAlB,EAA0BhB,KAAKiB,MAA/B,EAAuCjB,KAAKkB,WAA5C,EAAyDlB,KAAKmB,IAA9D,EAAoEnB,KAAKoB,UAAzE,EAAqFpB,KAAKqB,cAA1F,EAA0GrB,KAAKsB,WAA/G,CAAX;AACAzB,UAAI0B,IAAJ,CAASX,qBAAMA,qBAAMY,MAAN,GAAe,CAArB,CAAT;AACD,KAJD,MAIO;AACL3B,UAAI4B,MAAJ,CAAW,GAAX;AACA5B,UAAI0B,IAAJ,CAAS;AACPE,gBAAQ,MADD;AAEPC,iBAAS;AAFF,OAAT;AAID;AACF;AAzBgB,CAAnB;;kBA4BehC,U","file":"controller.js","sourcesContent":["import rides from '../model/ridesmodel';\r\nimport users from '../model/usersmodel';\r\nimport Ride from '../model/classes/ride';\r\n\r\nconst controller = {\r\n  get: (req, res) => {\r\n    res.send('Server is running, kindly use the endpoints. /api/v1/rides, /api/v1/rides/:rideId, /api/v1/rides, /api/v1/rides/:rideId/requests');\r\n  },\r\n\r\n  postRide: (req, res) => {\r\n    const ride = req.body;\r\n    const hasOrigin = Object.prototype.hasOwnProperty.call(ride, 'origin');\r\n    const hasDestination = Object.prototype.hasOwnProperty.call(ride, 'destination');\r\n    const hasTime = Object.prototype.hasOwnProperty.call(ride, 'time');\r\n    const hasAllowStops = Object.prototype.hasOwnProperty.call(ride, 'allowStops');\r\n    const hasAvaliableSpace = Object.prototype.hasOwnProperty.call(ride, 'avaliableSpace');\r\n    const hasDescription = Object.prototype.hasOwnProperty.call(ride, 'description');\r\n\r\n    if (hasOrigin && hasDestination && hasTime && hasAllowStops &&\r\n      hasAvaliableSpace && hasDescription) {\r\n      rides.push(new Ride(users[0].userID, ride.origin, ride.destination, ride.time, ride.allowStops, ride.avaliableSpace, ride.description));\r\n      res.json(rides[rides.length - 1]);\r\n    } else {\r\n      res.status(400);\r\n      res.json({\r\n        status: 'fail',\r\n        message: 'The information you provided doesn\\'t conform.',\r\n      });\r\n    }\r\n  },\r\n};\r\n\r\nexport default controller;\r\n"]}