{"version":3,"sources":["../../server/controllers/usercontroller.js"],"names":["dotenv","config","controller","postSignUp","req","res","helper","validEmail","body","EmailAddress","valid","bcrypt","genSalt","err","salt","hash","Password","error","text","values","FirstName","LastName","Sex","DOB","PhoneNumber","client","query","error1","result","status","json","message","token","jwt","sign","userId","rows","ID","process","env","KEY","expiresIn","response","data","MobileNumber","RidesTaken","RidesOffered","Friends","e","postLogIn","sql","length","compare","same","postRide","sqlInsert","driverID","origin","destination","time","allowStops","avaliableSpace","description","sqlSelect","er","re","sqlUpdate","rowCount","inError","deleteTestUser","email","callback"],"mappings":"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","file":"usercontroller.js","sourcesContent":["import dotenv from 'dotenv';\r\nimport jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt';\r\nimport helper from '../helpers/helper';\r\nimport client from '../model/db';\r\n\r\ndotenv.config();\r\n\r\nconst controller = {\r\n  postSignUp: (req, res) => {\r\n    helper.validEmail(req.body.EmailAddress, (valid) => {\r\n      try {\r\n        if (valid) {\r\n          bcrypt.genSalt(10, (err, salt) => {\r\n            if (err) {\r\n              throw err;\r\n            }\r\n            bcrypt.hash(req.body.Password, salt, (error, hash) => {\r\n              if (err) {\r\n                throw err;\r\n              }\r\n              const text = 'INSERT INTO public.\"Users\" (\"FirstName\", \"LastName\", \"Sex\", \"DOB\", \"MobileNumber\", \"EmailAddress\", \"Password\", \"RidesTaken\", \"RidesOffered\", \"Friends\", \"AccountStatus\") VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) RETURNING *;';\r\n              const values = [req.body.FirstName, req.body.LastName, req.body.Sex, req.body.DOB, req.body.PhoneNumber, req.body.EmailAddress, hash, 0, 0, 0, 'Active'];\r\n              client.query(text, values, (error1, result) => {\r\n                if (error1) {\r\n                  res.status(400);\r\n                  res.json({\r\n                    status: 'fail',\r\n                    message: 'Could not add user to database',\r\n                  });\r\n                } else {\r\n                  const token = jwt.sign(\r\n                    {\r\n                      userId: result.rows[0].ID,\r\n                    },\r\n                    process.env.KEY,\r\n                    {\r\n                      expiresIn: '1h',\r\n                    }\r\n                  );\r\n                  const response = {\r\n                    status: 'Success',\r\n                    data: {\r\n                      token,\r\n                      ID: result.rows[0].ID,\r\n                      FirstName: result.rows[0].FirstName,\r\n                      LastName: result.rows[0].LastName,\r\n                      MobileNumber: result.rows[0].MobileNumber,\r\n                      EmailAddress: result.rows[0].EmailAddress,\r\n                      RidesTaken: result.rows[0].RidesTaken,\r\n                      RidesOffered: result.rows[0].RidesOffered,\r\n                      Friends: result.rows[0].Friends,\r\n                    },\r\n                  };\r\n                  res.json(response);\r\n                }\r\n              });\r\n            });\r\n          });\r\n        } else {\r\n          res.status(400);\r\n          res.json({\r\n            status: 'fail',\r\n            message: 'Could not add user to database',\r\n          });\r\n        }\r\n      } catch (e) {\r\n        res.status(400);\r\n        res.json({\r\n          status: 'fail',\r\n          message: 'Could not add user to database',\r\n        });\r\n      }\r\n    });\r\n  },\r\n  postLogIn: (req, res) => {\r\n    try {\r\n      const sql = `SELECT * FROM public.\"Users\" WHERE \"EmailAddress\" = '${req.body.EmailAddress}'`;\r\n      client.query(sql, (err, result) => {\r\n        if (err || result.rows.length === 0) {\r\n          res.status(401);\r\n          res.json({\r\n            status: 'fail',\r\n            message: 'Unauthorized',\r\n          });\r\n        } else {\r\n          bcrypt.compare(req.body.Password, result.rows[0].Password, (error, same) => {\r\n            if (error || !same) {\r\n              res.status(401);\r\n              res.json({\r\n                status: 'fail',\r\n                message: 'Unauthorized',\r\n              });\r\n            } else {\r\n              const token = jwt.sign(\r\n                {\r\n                  userId: result.rows[0].ID,\r\n                },\r\n                process.env.KEY,\r\n                {\r\n                  expiresIn: '1h',\r\n                }\r\n              );\r\n              const response = {\r\n                status: 'success',\r\n                data: {\r\n                  token,\r\n                  ID: result.rows[0].ID,\r\n                  FirstName: result.rows[0].FirstName,\r\n                  LastName: result.rows[0].LastName,\r\n                  MobileNumber: result.rows[0].MobileNumber,\r\n                  EmailAddress: result.rows[0].EmailAddress,\r\n                  RidesTaken: result.rows[0].RidesTaken,\r\n                  RidesOffered: result.rows[0].RidesOffered,\r\n                  Friends: result.rows[0].Friends,\r\n                }\r\n              };\r\n              res.json(response);\r\n            }\r\n          });\r\n        }\r\n      });\r\n    } catch (e) {\r\n      res.status(401);\r\n      res.json({\r\n        status: 'fail',\r\n        message: 'Unauthorized',\r\n      });\r\n    }\r\n  },\r\n  postRide: (req, res) => {\r\n    try {\r\n      const sqlInsert = 'INSERT INTO public.\"Rides\" (\"DirverID\", \"Origin\", \"Destination\", \"Time\", \"AllowStops\", \"AvaliableSpace\", \"Description\") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING *;';\r\n      const values = [req.body.driverID, req.body.origin, req.body.destination, req.body.time, req.body.allowStops, req.body.avaliableSpace, req.body.description];\r\n      client.query(sqlInsert, values, (error) => {\r\n        if (error) {\r\n          res.status(500);\r\n          res.json({\r\n            status: 'fail',\r\n            message: 'Cannot save ride offer'\r\n          });\r\n        } else {\r\n          const sqlSelect = `SELECT * FROM public.\"Rides\" Where \"DirverID\" = ${req.body.driverID};`;\r\n          client.query(sqlSelect, (er, re) => {\r\n            if (er) {\r\n              res.status(500);\r\n              res.json({\r\n                status: 'fail',\r\n                message: 'Cannot save ride offer'\r\n              });\r\n            } else {\r\n              const sqlUpdate = `UPDATE public.\"Users\" SET \"RidesOffered\" = ${re.rowCount} Where \"ID\" = '${req.body.driverID}';`;\r\n              client.query(sqlUpdate, (inError) => {\r\n                if (inError) {\r\n                  res.json({\r\n                    message: 'Something went wrong'\r\n                  });\r\n                } else {\r\n                  res.status(200);\r\n                  res.json({\r\n                    message: 'Ride offer saved'\r\n                  });\r\n                }\r\n              });\r\n            }\r\n          });\r\n        }\r\n      });\r\n    } catch (e) {\r\n      res.json({\r\n        status: 'fail',\r\n        message: 'Cannot save ride offer',\r\n      });\r\n    }\r\n  },\r\n  deleteTestUser: (email, callback) => {\r\n    const sql = `DELETE FROM public.\"Users\" WHERE \"EmailAddress\" = '${email}'`;\r\n    client.query(sql, () => {\r\n      callback();\r\n    });\r\n  },\r\n};\r\n\r\nexport default controller;\r\n"]}