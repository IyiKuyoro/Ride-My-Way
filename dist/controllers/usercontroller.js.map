{"version":3,"sources":["../../server/controllers/usercontroller.js"],"names":["dotenv","config","controller","postSignUp","req","res","helper","validEmail","body","emailAddress","valid","bcrypt","genSalt","err","salt","hash","password","error","text","values","firstName","lastName","sex","dob","phoneNumber","client","query","error1","result","status","json","message","token","jwt","sign","userId","rows","ID","process","env","KEY","expiresIn","response","data","iD","id","mobileNumber","ridesTaken","ridesOffered","friends","e","postLogIn","sql","length","compare","same","postRide","verify","headers","er","sqlInsert","driverId","origin","destination","time","allowStops","avaliableSpace","description","sqlSelect","re","sqlUpdate","rowCount","deleteTestUser","email","callback"],"mappings":"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","file":"usercontroller.js","sourcesContent":["import dotenv from 'dotenv';\r\nimport jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt';\r\nimport helper from '../helpers/helper';\r\nimport client from '../model/db';\r\n\r\ndotenv.config();\r\n\r\nconst controller = {\r\n  postSignUp: (req, res) => {\r\n    helper.validEmail(req.body.emailAddress, (valid) => {\r\n      try {\r\n        if (valid) {\r\n          bcrypt.genSalt(10, (err, salt) => {\r\n            if (err) {\r\n              throw err;\r\n            }\r\n            bcrypt.hash(req.body.password, salt, (error, hash) => {\r\n              if (err) {\r\n                throw err;\r\n              }\r\n              const text = 'INSERT INTO public.\"Users\" (\"firstName\", \"lastName\", \"sex\", \"dob\", \"mobileNumber\", \"emailAddress\", \"password\", \"ridesTaken\", \"ridesOffered\", \"friends\", \"accountStatus\") VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) RETURNING *;';\r\n              const values = [req.body.firstName, req.body.lastName, req.body.sex, req.body.dob, req.body.phoneNumber, req.body.emailAddress, hash, 0, 0, 0, 'Active'];\r\n              client.query(text, values, (error1, result) => {\r\n                if (error1) {\r\n                  res.status(400).json({\r\n                    status: 'fail',\r\n                    message: 'Could not add user to database',\r\n                  });\r\n                } else {\r\n                  const token = jwt.sign(\r\n                    {\r\n                      userId: result.rows[0].ID,\r\n                    },\r\n                    process.env.KEY,\r\n                    {\r\n                      expiresIn: '1h',\r\n                    }\r\n                  );\r\n                  const response = {\r\n                    status: 'Success',\r\n                    data: {\r\n                      token,\r\n                      iD: result.rows[0].id,\r\n                      firstName: result.rows[0].firstName,\r\n                      lastName: result.rows[0].lastName,\r\n                      mobileNumber: result.rows[0].mobileNumber,\r\n                      emailAddress: result.rows[0].emailAddress,\r\n                      ridesTaken: result.rows[0].ridesTaken,\r\n                      ridesOffered: result.rows[0].ridesOffered,\r\n                      friends: result.rows[0].friends,\r\n                    },\r\n                  };\r\n                  res.json(response);\r\n                }\r\n              });\r\n            });\r\n          });\r\n        } else {\r\n          res.status(400).json({\r\n            status: 'fail',\r\n            message: 'Could not add user to database',\r\n          });\r\n        }\r\n      } catch (e) {\r\n        res.status(500).json({\r\n          status: 'fail',\r\n          message: 'Oops, seems like something went wrong here'\r\n        });\r\n      }\r\n    });\r\n  },\r\n  postLogIn: (req, res) => {\r\n    try {\r\n      const sql = `SELECT * FROM public.\"Users\" WHERE \"emailAddress\" = '${req.body.emailAddress}'`;\r\n      client.query(sql, (err, result) => {\r\n        if (err || result.rows.length === 0) {\r\n          res.status(401).json({\r\n            status: 'fail',\r\n            message: 'Wrong login details',\r\n          });\r\n        } else {\r\n          bcrypt.compare(req.body.password, result.rows[0].password, (error, same) => {\r\n            if (error || !same) {\r\n              res.status(401).json({\r\n                status: 'fail',\r\n                message: 'Wrong login details',\r\n              });\r\n            } else {\r\n              const token = jwt.sign(\r\n                {\r\n                  userId: result.rows[0].id,\r\n                },\r\n                process.env.KEY,\r\n                {\r\n                  expiresIn: '1h',\r\n                }\r\n              );\r\n              const response = {\r\n                status: 'success',\r\n                data: {\r\n                  token,\r\n                  iD: result.rows[0].id,\r\n                  firstName: result.rows[0].firstName,\r\n                  lastName: result.rows[0].lastName,\r\n                  mobileNumber: result.rows[0].mobileNumber,\r\n                  emailAddress: result.rows[0].emailAddress,\r\n                  ridesTaken: result.rows[0].ridesTaken,\r\n                  ridesOffered: result.rows[0].ridesOffered,\r\n                  friends: result.rows[0].friends,\r\n                }\r\n              };\r\n              res.json(response);\r\n            }\r\n          });\r\n        }\r\n      });\r\n    } catch (e) {\r\n      res.status(500).json({\r\n        status: 'fail',\r\n        message: 'Oops, seems like something went wrong here'\r\n      });\r\n    }\r\n  },\r\n  postRide: (req, res) => {\r\n    try {\r\n      jwt.verify(req.headers.jwt, process.env.KEY, null, (er) => {\r\n        if (er) {\r\n          res.status(401).json({\r\n            status: 'fail',\r\n            message: 'This token is either wrong or has expired'\r\n          });\r\n        } else {\r\n          const sqlInsert = 'INSERT INTO public.\"Rides\" (\"driverId\", \"origin\", \"destination\", \"time\", \"allowStops\", \"avaliableSpace\", \"description\") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING *;';\r\n          const values = [req.body.driverId, req.body.origin, req.body.destination, req.body.time, req.body.allowStops, req.body.avaliableSpace, req.body.description];\r\n          client.query(sqlInsert, values, (error) => {\r\n            if (error) {\r\n              res.status(404).json({\r\n                status: 'fail',\r\n                message: 'Ride not found'\r\n              });\r\n            } else {\r\n              const sqlSelect = `SELECT * FROM public.\"Rides\" Where \"driverId\" = ${req.body.driverId};`;\r\n              client.query(sqlSelect, (err, re) => {\r\n                const sqlUpdate = `UPDATE public.\"Users\" SET \"ridesOffered\" = ${re.rowCount} Where \"ID\" = '${req.body.driverId}';`;\r\n                client.query(sqlUpdate, () => {\r\n                  res.status(200).json({\r\n                    status: 'success',\r\n                    message: 'Ride offer saved'\r\n                  });\r\n                });\r\n              });\r\n            }\r\n          });\r\n        }\r\n      });\r\n    } catch (e) {\r\n      res.status(500).json({\r\n        status: 'fail',\r\n        message: 'Oops, seems like something went wrong here'\r\n      });\r\n    }\r\n  },\r\n  deleteTestUser: (email, callback) => {\r\n    const sql = `DELETE FROM public.\"Users\" WHERE \"emailAddress\" = '${email}'`;\r\n    client.query(sql, () => {\r\n      callback();\r\n    });\r\n  },\r\n};\r\n\r\nexport default controller;\r\n"]}