{"version":3,"sources":["../../server/controllers/usercontroller.js"],"names":["dotenv","config","genID","Math","floor","random","controller","postSignUp","req","res","helper","validEmail","body","EmailAddress","valid","text","values","FirstName","LastName","Sex","DOB","PhoneNumber","Password","client","query","error1","result","status","json","message","token","jwt","sign","email","rows","userId","ID","process","env","KEY","expiresIn","response","data","deleteTestUser","callback","sql"],"mappings":";;;;;;AAAA;;;;AACA;;;;AAEA;;;;AACA;;;;;;AAFA;AAIAA,iBAAOC,MAAP;;AAEA,IAAMC,QAAQ,SAARA,KAAQ;AAAA,iBAAWC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgB,UAA3B,IAAyC,UAApD;AAAA,CAAd,C,CAAgF;AAChF,IAAMC,aAAa;AACjBC,cAAY,oBAACC,GAAD,EAAMC,GAAN,EAAc;AACxBC,qBAAOC,UAAP,CAAkBH,IAAII,IAAJ,CAASC,YAA3B,EAAyC,UAACC,KAAD,EAAW;AAClD,UAAIA,KAAJ,EAAW;AACT,YAAMC,OAAO,kOAAb;AACA,YAAMC,SAAS,CAACd,OAAD,EAAUM,IAAII,IAAJ,CAASK,SAAnB,EAA8BT,IAAII,IAAJ,CAASM,QAAvC,EAAiDV,IAAII,IAAJ,CAASO,GAA1D,EAA+DX,IAAII,IAAJ,CAASQ,GAAxE,EAA6EZ,IAAII,IAAJ,CAASS,WAAtF,EAAmGb,IAAII,IAAJ,CAASC,YAA5G,EAA0HL,IAAII,IAAJ,CAASU,QAAnI,EAA6I,CAA7I,EAAgJ,CAAhJ,EAAmJ,CAAnJ,CAAf;AACAC,qBAAOC,KAAP,CAAaT,IAAb,EAAmBC,MAAnB,EAA2B,UAACS,MAAD,EAASC,MAAT,EAAoB;AAC7C,cAAID,MAAJ,EAAY;AACVhB,gBAAIkB,MAAJ,CAAW,GAAX;AACAlB,gBAAImB,IAAJ,CAAS;AACPD,sBAAQ,MADD;AAEPE,uBAAS;AAFF,aAAT;AAID,WAND,MAMO;AACL,gBAAMC,QAAQC,uBAAIC,IAAJ,CACZ;AACEC,qBAAOP,OAAOQ,IAAP,CAAY,CAAZ,EAAerB,YADxB;AAEEsB,sBAAQT,OAAOQ,IAAP,CAAY,CAAZ,EAAeE;AAFzB,aADY,EAKZC,QAAQC,GAAR,CAAYC,GALA,EAMZ;AACEC,yBAAW;AADb,aANY,CAAd;AAUA,gBAAMC,WAAW;AACfX,0BADe;AAEfH,sBAAQ,SAFO;AAGfe,oBAAM;AACJN,oBAAIV,OAAOQ,IAAP,CAAY,CAAZ,EAAeE,EADf;AAEJnB,2BAAWS,OAAOQ,IAAP,CAAY,CAAZ,EAAejB,SAFtB;AAGJC,0BAAUQ,OAAOQ,IAAP,CAAY,CAAZ,EAAehB,QAHrB;AAIJC,qBAAKO,OAAOQ,IAAP,CAAY,CAAZ,EAAef,GAJhB;AAKJC,qBAAKM,OAAOQ,IAAP,CAAY,CAAZ,EAAed,GALhB;AAMJP,8BAAca,OAAOQ,IAAP,CAAY,CAAZ,EAAerB;AANzB;AAHS,aAAjB;AAYAJ,gBAAImB,IAAJ,CAASa,QAAT;AACD;AACF,SAhCD;AAiCD,OApCD,MAoCO;AACLhC,YAAIkB,MAAJ,CAAW,GAAX;AACAlB,YAAImB,IAAJ,CAAS;AACPD,kBAAQ,MADD;AAEPE,mBAAS;AAFF,SAAT;AAID;AACF,KA5CD;AA6CD,GA/CgB;AAgDjBc,kBAAgB,wBAACV,KAAD,EAAQW,QAAR,EAAqB;AACnClC,qBAAOC,UAAP,CAAkBsB,KAAlB,EAAyB,UAACQ,QAAD,EAAc;AACrC,UAAIA,QAAJ,EAAc;AACZ,YAAMI,+DAA4DZ,KAA5D,OAAN;AACAV,qBAAOC,KAAP,CAAaqB,GAAb,EAAkB,YAAM;AACtBD;AACD,SAFD;AAGD,OALD,MAKO;AACLA;AACD;AACF,KATD;AAUD;AA3DgB,CAAnB;;kBA8DetC,U","file":"usercontroller.js","sourcesContent":["import dotenv from 'dotenv';\r\nimport jwt from 'jsonwebtoken';\r\n// import bcrypt from 'bcrypt';\r\nimport helper from '../helpers/helper';\r\nimport client from '../model/db';\r\n\r\ndotenv.config();\r\n\r\nconst genID = () => `U_${Math.floor(Math.random() * 9000000000) + 1000000000}`; //  Got this from a web source I can't remember now.\r\nconst controller = {\r\n  postSignUp: (req, res) => {\r\n    helper.validEmail(req.body.EmailAddress, (valid) => {\r\n      if (valid) {\r\n        const text = 'INSERT INTO public.\"Users\" (\"ID\", \"FirstName\", \"LastName\", \"Sex\", \"DOB\", \"MobileNumber\", \"EmailAddress\", \"Password\", \"RidesOffered\", \"RidesTaken\", \"Friends\") VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) RETURNING *;';\r\n        const values = [genID(), req.body.FirstName, req.body.LastName, req.body.Sex, req.body.DOB, req.body.PhoneNumber, req.body.EmailAddress, req.body.Password, 0, 0, 0];\r\n        client.query(text, values, (error1, result) => {\r\n          if (error1) {\r\n            res.status(400);\r\n            res.json({\r\n              status: 'fail',\r\n              message: 'Could not add user to database',\r\n            });\r\n          } else {\r\n            const token = jwt.sign(\r\n              {\r\n                email: result.rows[0].EmailAddress,\r\n                userId: result.rows[0].ID,\r\n              },\r\n              process.env.KEY,\r\n              {\r\n                expiresIn: '1h',\r\n              }\r\n            );\r\n            const response = {\r\n              token,\r\n              status: 'Success',\r\n              data: {\r\n                ID: result.rows[0].ID,\r\n                FirstName: result.rows[0].FirstName,\r\n                LastName: result.rows[0].LastName,\r\n                Sex: result.rows[0].Sex,\r\n                DOB: result.rows[0].DOB,\r\n                EmailAddress: result.rows[0].EmailAddress,\r\n              },\r\n            };\r\n            res.json(response);\r\n          }\r\n        });\r\n      } else {\r\n        res.status(400);\r\n        res.json({\r\n          status: 'fail',\r\n          message: 'Could not add user to database',\r\n        });\r\n      }\r\n    });\r\n  },\r\n  deleteTestUser: (email, callback) => {\r\n    helper.validEmail(email, (response) => {\r\n      if (response) {\r\n        const sql = `DELETE FROM public.\"Users\" WHERE \"EmailAddress\" = '${email}'`;\r\n        client.query(sql, () => {\r\n          callback();\r\n        });\r\n      } else {\r\n        callback();\r\n      }\r\n    });\r\n  },\r\n};\r\n\r\nexport default controller;\r\n"]}