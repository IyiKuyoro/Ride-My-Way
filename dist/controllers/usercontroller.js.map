{"version":3,"sources":["../../server/controllers/usercontroller.js"],"names":["dotenv","config","genID","Math","floor","random","controller","postSignUp","req","res","helper","validEmail","body","EmailAddress","valid","bcrypt","genSalt","err","salt","console","log","hash","Password","error","text","values","FirstName","LastName","Sex","DOB","PhoneNumber","client","query","error1","result","status","json","message","token","jwt","sign","email","rows","userId","ID","process","env","KEY","expiresIn","response","data","deleteTestUser","callback","sql"],"mappings":"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","file":"usercontroller.js","sourcesContent":["import dotenv from 'dotenv';\r\nimport jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt';\r\nimport helper from '../helpers/helper';\r\nimport client from '../model/db';\r\n\r\ndotenv.config();\r\n\r\nconst genID = () => `U_${Math.floor(Math.random() * 9000000000) + 1000000000}`; //  Got this from a web source I can't remember now.\r\nconst controller = {\r\n  postSignUp: (req, res) => {\r\n    helper.validEmail(req.body.EmailAddress, (valid) => {\r\n      if (valid) {\r\n        bcrypt.genSalt(10, (err, salt) => {\r\n          if (err) {\r\n            console.log(err);\r\n          }\r\n          bcrypt.hash(req.body.Password, salt, (error, hash) => {\r\n            if (err) {\r\n              console.log(error);\r\n            }\r\n            const text = 'INSERT INTO public.\"Users\" (\"ID\", \"FirstName\", \"LastName\", \"Sex\", \"DOB\", \"MobileNumber\", \"EmailAddress\", \"Password\", \"RidesOffered\", \"RidesTaken\", \"Friends\") VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) RETURNING *;';\r\n            const values = [genID(), req.body.FirstName, req.body.LastName, req.body.Sex, req.body.DOB, req.body.PhoneNumber, req.body.EmailAddress, hash, 0, 0, 0];\r\n            client.query(text, values, (error1, result) => {\r\n              if (error1) {\r\n                res.status(400);\r\n                res.json({\r\n                  status: 'fail',\r\n                  message: 'Could not add user to database',\r\n                });\r\n              } else {\r\n                const token = jwt.sign(\r\n                  {\r\n                    email: result.rows[0].EmailAddress,\r\n                    userId: result.rows[0].ID,\r\n                  },\r\n                  process.env.KEY,\r\n                  {\r\n                    expiresIn: '1h',\r\n                  }\r\n                );\r\n                const response = {\r\n                  token,\r\n                  status: 'Success',\r\n                  data: {\r\n                    ID: result.rows[0].ID,\r\n                    FirstName: result.rows[0].FirstName,\r\n                    LastName: result.rows[0].LastName,\r\n                    Sex: result.rows[0].Sex,\r\n                    DOB: result.rows[0].DOB,\r\n                    EmailAddress: result.rows[0].EmailAddress,\r\n                  },\r\n                };\r\n                res.json(response);\r\n              }\r\n            });\r\n          });\r\n        });\r\n      } else {\r\n        res.status(400);\r\n        res.json({\r\n          status: 'fail',\r\n          message: 'Could not add user to database',\r\n        });\r\n      }\r\n    });\r\n  },\r\n  deleteTestUser: (email, callback) => {\r\n    helper.validEmail(email, (response) => {\r\n      if (response) {\r\n        const sql = `DELETE FROM public.\"Users\" WHERE \"EmailAddress\" = '${email}'`;\r\n        client.query(sql, () => {\r\n          callback();\r\n        });\r\n      } else {\r\n        callback();\r\n      }\r\n    });\r\n  },\r\n};\r\n\r\nexport default controller;\r\n"]}