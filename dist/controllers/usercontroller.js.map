{"version":3,"sources":["../../server/controllers/usercontroller.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"usercontroller.js","sourcesContent":["// import dotenv from 'dotenv';\r\n// import jwt from 'jsonwebtoken';\r\n// import bcrypt from 'bcrypt';\r\n// import helper from '../helpers/helper';\r\n// import client from '../model/db';\r\n\r\n// dotenv.config();\r\n\r\n// const genID = () => `U_${Math.floor(Math.random() * 9000000000) + 1000000000}`; //  Got this from a web source I can't remember now.\r\n// const controller = {\r\n//   postSignUp: (req, res) => {\r\n//     helper.validEmail(req.body.EmailAddress, (valid) => {\r\n//       if (valid) {\r\n//         bcrypt.genSalt(10, (err, salt) => {\r\n//           if (err) {\r\n//             console.log(err);\r\n//           }\r\n//           bcrypt.hash(req.body.Password, salt, (error, hash) => {\r\n//             if (err) {\r\n//               console.log(error);\r\n//             }\r\n//             const text = 'INSERT INTO public.\"Users\" (\"ID\", \"FirstName\", \"LastName\", \"Sex\", \"DOB\", \"MobileNumber\", \"EmailAddress\", \"Password\", \"RidesOffered\", \"RidesTaken\", \"Friends\") VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) RETURNING *;';\r\n//             const values = [genID(), req.body.FirstName, req.body.LastName, req.body.Sex, req.body.DOB, req.body.PhoneNumber, req.body.EmailAddress, hash, 0, 0, 0];\r\n//             client.query(text, values, (error1, result) => {\r\n//               if (error1) {\r\n//                 res.status(400);\r\n//                 res.json({\r\n//                   status: 'fail',\r\n//                   message: 'Could not add user to database',\r\n//                 });\r\n//               } else {\r\n//                 const token = jwt.sign(\r\n//                   {\r\n//                     email: result.rows[0].EmailAddress,\r\n//                     userId: result.rows[0].ID,\r\n//                   },\r\n//                   process.env.KEY,\r\n//                   {\r\n//                     expiresIn: '1h',\r\n//                   }\r\n//                 );\r\n//                 const response = {\r\n//                   token,\r\n//                   status: 'Success',\r\n//                   data: {\r\n//                     ID: result.rows[0].ID,\r\n//                     FirstName: result.rows[0].FirstName,\r\n//                     LastName: result.rows[0].LastName,\r\n//                     Sex: result.rows[0].Sex,\r\n//                     DOB: result.rows[0].DOB,\r\n//                     EmailAddress: result.rows[0].EmailAddress,\r\n//                   },\r\n//                 };\r\n//                 res.json(response);\r\n//               }\r\n//             });\r\n//           });\r\n//         });\r\n//       } else {\r\n//         res.status(400);\r\n//         res.json({\r\n//           status: 'fail',\r\n//           message: 'Could not add user to database',\r\n//         });\r\n//       }\r\n//     });\r\n//   },\r\n//   deleteTestUser: (email, callback) => {\r\n//     helper.validEmail(email, (response) => {\r\n//       if (response) {\r\n//         const sql = `DELETE FROM public.\"Users\" WHERE \"EmailAddress\" = '${email}'`;\r\n//         client.query(sql, () => {\r\n//           callback();\r\n//         });\r\n//       } else {\r\n//         callback();\r\n//       }\r\n//     });\r\n//   },\r\n// };\r\n\r\n// export default controller;\r\n"]}